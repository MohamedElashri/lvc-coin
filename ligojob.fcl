#include "ligo.fcl"
#include "CalHit.fcl"
#include "Slicer4D.fcl"
#include "MultiHoughT.fcl"
#include "ElasticArmsHS.fcl"
#include "FuzzyKVertex.fcl"
#include "BreakPoint.fcl"
#include "RemoveBeamSpills.fcl"
#include "services.fcl"

process_name: ligoFTW

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "histos.root" }
  scheduler:    { wantTracer: false wantSummary: true }
  message:      @local::standard_out
  @table::standard_services
}

# Cargo-culting this line.  Ok, not entirely cargo-culting, because I
# tested that if it isn't here, it doesn't work.  But I don't know what
# it does.
services.IFBeam: {}

ligo_removebeam: @local::standard_removebeamspills

#Start each new event with an empty event.
source:
{
  module_type: RootInput
  maxEvents: -1
}

thisone_breakpoint_here: @local::standard_breakpoint
thisone_breakpoint_here.FitAsPion: false
thisone_breakpoint_here.FitAsProton: false

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
 filters:
 {
   removebeam: @local::ligo_removebeam
 }
 producers:
 {
   calhit: @local::standard_calhit
   slicer: @local::standard_slicer4d
   multihough:   @local::standard_multihough
   elasticarmshs: @local::standard_elasticarmshs
   fuzzykvertex: @local::standard_fuzzykvertex
   breakpoint: @local::thisone_breakpoint_here
   ligo: @local::standard_ligo
 }

  reco: [ calhit,
          slicer,
          multihough, # for breakpoint
          elasticarmshs, # for breakpoint
          fuzzykvertex, # for breakpoint
          breakpoint,
          removebeam,
          ligo ]

 stream1: [ out1 ]

 #end_path are things that do not modify art::Event, includes analyzers and
 #output modules.  All items here can be run simultaneously
 end_paths:     [ stream1 ]  
}

outputs:
{
 out1:
  {
   module_type: RootOutput
   fileName:    "ligo.root" #default file name, can override from command line with -o or --output
  }
}
